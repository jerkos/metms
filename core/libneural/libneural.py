# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libneural', [dirname(__file__)])
        except ImportError:
            import _libneural
            return _libneural
        if fp is not None:
            try:
                _mod = imp.load_module('_libneural', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libneural = swig_import_helper()
    del swig_import_helper
else:
    import _libneural
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


ALL = _libneural.ALL
INPUT = _libneural.INPUT
HIDDEN = _libneural.HIDDEN
OUTPUT = _libneural.OUTPUT
NONINPUT = _libneural.NONINPUT
class neuron(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, neuron, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, neuron, name)
    __repr__ = _swig_repr
    __swig_setmethods__["weights"] = _libneural.neuron_weights_set
    __swig_getmethods__["weights"] = _libneural.neuron_weights_get
    if _newclass:weights = _swig_property(_libneural.neuron_weights_get, _libneural.neuron_weights_set)
    __swig_setmethods__["output"] = _libneural.neuron_output_set
    __swig_getmethods__["output"] = _libneural.neuron_output_get
    if _newclass:output = _swig_property(_libneural.neuron_output_get, _libneural.neuron_output_set)
    def __init__(self): 
        this = _libneural.new_neuron()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libneural.delete_neuron
    __del__ = lambda self : None;
neuron_swigregister = _libneural.neuron_swigregister
neuron_swigregister(neuron)

class nnlayer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nnlayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nnlayer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nodes"] = _libneural.nnlayer_nodes_set
    __swig_getmethods__["nodes"] = _libneural.nnlayer_nodes_get
    if _newclass:nodes = _swig_property(_libneural.nnlayer_nodes_get, _libneural.nnlayer_nodes_set)
    def __init__(self, *args): 
        this = _libneural.new_nnlayer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libneural.delete_nnlayer
    __del__ = lambda self : None;
nnlayer_swigregister = _libneural.nnlayer_swigregister
nnlayer_swigregister(nnlayer)


def sigmoid(*args):
  return _libneural.sigmoid(*args)
sigmoid = _libneural.sigmoid
class nnwork(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nnwork, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nnwork, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libneural.new_nnwork(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libneural.delete_nnwork
    __del__ = lambda self : None;
    def get_layersize(self, *args): return _libneural.nnwork_get_layersize(self, *args)
    def train(self, *args): return _libneural.nnwork_train(self, *args)
    def run(self, *args): return _libneural.nnwork_run(self, *args)
    def load(self, *args): return _libneural.nnwork_load(self, *args)
    def save(self, *args): return _libneural.nnwork_save(self, *args)
nnwork_swigregister = _libneural.nnwork_swigregister
nnwork_swigregister(nnwork)

# This file is compatible with both classic and new-style classes.


